package ua.kiev.prog;

import java.io.*;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Client implements Runnable {
    private Socket socket;
    private FileManager fm;

    public Client(Socket socket, String path) {
        this.socket = socket;
        fm = new FileManager(path);
    }

    private void returnStatusCode(int code, OutputStream os) throws IOException {
        String msg = null;

        switch (code) {
            case 400:
                msg = "HTTP/1.1 400 Bad Request";
                break;
            case 404:
                msg = "HTTP/1.1 404 Not Found";
                break;
            case 500:
                msg = "HTTP/1.1 500 Internal Server Error";
                break;
        }

        byte[] resp = msg.concat("\r\n\r\n").getBytes();
        os.write(resp);
    }

    private byte[] getBinaryHeaders(List<String> headers) {
        StringBuilder res = new StringBuilder();

        for (String s : headers)
            res.append(s);

        return res.toString().getBytes();
    }

    private void doPost(OutputStream os, String request) throws IOException
    {
        // String content = "Test POST reply";
        int boundaryIndex = request.indexOf("boundary=") + "bundary=".length();
        String boundary = "--" + request.substring(boundaryIndex, request.indexOf("\r\n", boundaryIndex));
        System.out.println("********* " + boundary + "********* ");

        int firstBoundary = request.indexOf(boundary, boundaryIndex + boundary.length() + 1) ;
        int lastBoundary = request.indexOf(boundary, firstBoundary + boundary.length() + 1);

        int firstCRLF = request.indexOf("\r\n\r\n", firstBoundary);

        String payload = request.substring(firstCRLF + 4, lastBoundary-2);
        Pattern pattern = Pattern.compile("filename=\".*\"");
        Matcher matcher = pattern.matcher(request);

        String filename = "c:\\temp\\default.txt";
        if (matcher.find())
        {
            int i1 = matcher.start();
            int i2 = matcher.end();
            filename = request.substring(i1, i2);
            filename = filename.substring("filename=".length()+1, filename.lastIndexOf('"'));
            System.out.println(filename);
        }

        FileOutputStream fos = new FileOutputStream("c:\\temp\\temp" + filename);
        fos.write(payload.getBytes());
        fos.flush();
        fos.close();


        List<String> headers = new ArrayList<String>();
        headers.add("HTTP/1.1 200 OK\r\n");
        headers.add("Content-Length: " + request.length() + "\r\n");
        headers.add("Connection: close\r\n\r\n");
        os.write(getBinaryHeaders(headers));
        os.write(request.getBytes());
    }

    private void doGet(OutputStream os, String url) throws IOException
    {
        if ("/".equals(url))
            url = "/index.html";

        List<String> headers = new ArrayList<String>();
        headers.add("HTTP/1.1 200 OK\r\n");

        byte[] content = fm.get(url);

        if (content == null) {
            returnStatusCode(404, os);
            return;
        }

        ProcessorsList pl = new ProcessorsList();
        pl.add(new Compressor(6));
        // pl.add(new Chunker(30)); // comment
        content = pl.process(content, headers);

        if (content == null) {
            returnStatusCode(500, os);
            return;
        }

        // uncomment next line
        headers.add("Content-Length: " + content.length + "\r\n");
        headers.add("Connection: close\r\n\r\n");
        os.write(getBinaryHeaders(headers));
        os.write(content);
    }

    private void process(String request, OutputStream os) throws IOException {

        FileWriter writer = new FileWriter("c:\\temp\\request.txt");
        writer.write(request);
        writer.write("\r\n==============\r\n");
        writer.flush();
        writer.close();
        System.out.println(request);
        System.out.println("---------------------------------------------");

        String originalRequest = request;
        int idx = request.indexOf("\r\n");
        request = request.substring(0, idx);

        String[] parts = request.split(" ");
        if (parts.length != 3) {
            returnStatusCode(400, os);
            return;
        }

        String method = parts[0], url = parts[1], version = parts[2];

        if ((!version.equalsIgnoreCase("HTTP/1.0")) && (!version.equalsIgnoreCase("HTTP/1.1"))) {
            returnStatusCode(400, os);
            return;
        }
        if (method.equalsIgnoreCase("GET")) {
            doGet(os, url);
        }
        else if (method.equalsIgnoreCase("POST"))
        {
            doPost(os, originalRequest);
        }
        else
            returnStatusCode(400, os);
    }

    public void run() {

            try {
                InputStream is = socket.getInputStream();
                OutputStream os = socket.getOutputStream();

                ByteArrayOutputStream bs = new ByteArrayOutputStream();
                byte[] buf = new byte[64 * 1024]; // 64KB buffer
                int r;

                try {
                    do {
                        boolean dataRead = false;
                        while (is.available() > 0) {
                            r = is.read(buf);
                            if (r > 0) {
                                bs.write(buf, 0, r);
                                dataRead = true;
                            }
                        }
                        if (dataRead) {
                            bs.flush();
                            String request = new String(bs.toByteArray());
                            bs.close();
                            process(request, os);
                        }

                    }
                    while (!Thread.currentThread().isInterrupted());
                } finally {
                    socket.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                return;
            }
    }
}